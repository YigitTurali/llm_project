# Config for multi-device LoRA finetuning in lora_finetune_distributed.py
# using a Llama3.2 1B Instruct model
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download meta-llama/Llama-3.2-1B-Instruct --output-dir /tmp/Llama-3.2-1B-Instruct --ignore-patterns "original/consolidated.00.pth"
#
# To launch on 2 devices, run the following command from root:
#   tune run --nproc_per_node 2 lora_finetune_distributed --config llama3_2/1B_lora
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   tune run --nproc_per_node 2 lora_finetune_distributed --config llama3_2/1B_lora checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#
# This config works best when the model is being fine-tuned on 2+ GPUs.
# For single device LoRA finetuning please use 1B_lora_single_device.yaml
# or 1B_qlora_single_device.yaml

# Tokenizer
tokenizer:
  _component_: torchtune.models.llama3.llama3_tokenizer
  path: /home/mehmet/codebase/llm_project/models/Llama-3.2-1B/original/tokenizer.model
  max_seq_len: null

# Model Arguments
model:
  _component_: torchtune.models.llama3_2.lora_llama3_2_1b
  lora_attn_modules: ['q_proj', 'v_proj']
  apply_lora_to_mlp: True
  apply_lora_to_output: False
  lora_rank: 64
  lora_alpha: 128
  lora_dropout: 0.0

checkpointer:
  _component_: torchtune.training.FullModelMetaCheckpointer
  checkpoint_dir: ./models/Llama-3.2-1B
  checkpoint_files: [
    /home/mehmet/codebase/llm_project/models/Llama-3.2-1B/original/consolidated.00.pth
  ]
  recipe_checkpoint: null
  output_dir: /home/mehmet/codebase/llm_project/outputs/Llama-3.2-1B
  model_type: LLAMA3_2
resume_from_checkpoint: False

# Dataset and Sampler
dataset:
  _component_: torchtune.datasets.instruct_dataset
  source: json
  data_files: /home/mehmet/codebase/llm_project/data/CustomeDataNoInstructions.json
  split: train
  train_on_input: False
  packed: False
seed: null
shuffle: True
batch_size: 4

# Optimizer and Scheduler
optimizer:
  _component_: torch.optim.AdamW
  fused: True
  weight_decay: 0.01
  lr: 3e-4
lr_scheduler:
  _component_: torchtune.modules.get_cosine_schedule_with_warmup
  num_warmup_steps: 100

loss:
  _component_: torchtune.modules.loss.CEWithChunkedOutputLoss

# Training
epochs: 10
max_steps_per_epoch: null
gradient_accumulation_steps: 4
compile: False # set it to True for better memory and performance

# Logging
output_dir: /home/mehmet/codebase/llm_project/logs/lora_finetune_output
metric_logger:
  _component_: torchtune.training.metric_logging.WandBLogger
  log_dir: torchtune-llama3
  project: torchtune
log_every_n_steps: 1
log_peak_memory_stats: False

# Environment
device: cuda
dtype: bf16
enable_activation_checkpointing: True
